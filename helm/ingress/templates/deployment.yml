apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress
  labels:
    app.kubernetes.io/name: ingress
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress
    spec:
      serviceAccountName: ingress
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      nodeSelector:
        cloud.google.com/gke-nodepool: {{ .Values.gke.ingressNodePoolName }}
      tolerations:
        - key: dedicated
          operator: Equal
          value: ingress
          effect: NoSchedule
      containers:
        - name: ingress
          image: nginx:alpine
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              hostPort: 80
              protocol: TCP
{{ if .Values.https.enabled }}
            - name: https
              containerPort: 443
              hostPort: 443
              protocol: TCP
{{ end }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          securityContext:
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/conf.d
              readOnly: true
{{ if .Values.https.enabled }}
            - name: tls-cert
              mountPath: /etc/letsencrypt/cert
              readOnly: true
            - name: ssl-dhparams
              mountPath: /etc/letsencrypt/dhparams
              readOnly: true
            - name: nginx-cache
              mountPath: /var/cache/nginx
              readOnly: false
            - name: var-run
              mountPath: /var/run
              readOnly: false
{{ end }}
      volumes:
        - configMap:
            name: ingress
          name: nginx-conf
{{ if .Values.https.enabled }}
        - secret:
            secretName: {{ .Values.https.cert_secret_name }}
          name: tls-cert
        - secret:
            secretName: ssl-dhparams
          name: ssl-dhparams
        - name: nginx-cache
          emptyDir: {}
        # needed to register nginx pid
        - name: var-run
          emptyDir: {}
{{ end }}
