apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress
data:
  default.conf: |
    gzip on;
    resolver kube-dns.kube-system.svc.cluster.local valid=30s ipv6=off;
    log_format json_combined escape=json
    '{'
      '"time":"$msec",'
      '"httpRequest":{'
        '"requestMethod":"$request_method",'
        '"requestUrl":"$scheme://$host$request_uri",'
        '"requestSize":$request_length,'
        '"status":$status,'
        '"responseSize":$bytes_sent,'
        '"userAgent":"$http_user_agent",'
        '"remoteIp":"$remote_addr",'
        '"serverIp":"$server_addr",'
        '"referer":"$http_referer",'
        '"latency":"${request_time}s",'
        '"protocol":"$server_protocol"'
      '}'
    '}';


    access_log off;

    server {
      access_log  /var/log/nginx/access.log  json_combined;
      server_name _;
      server_tokens off;
      listen 80 default_server;

      location /health {
         access_log off;
         return 200;
      }
      location / {
         return 444; # send no response, nginx speciality
      }
    }

{{ if .Values.https.enabled }}
    map "" $empty {
        default "";
    }

    server {
      access_log  /var/log/nginx/access.log  json_combined;
      server_name _;
      server_tokens off;
      listen 443 default_server;
      # Use first available certificate as nginx requires one to serve port 443      
      ssl_certificate /etc/letsencrypt/cert/{{ (first .Values.domains).tls_secret_name }}/tls.crt; # managed by Certbot
      ssl_certificate_key /etc/letsencrypt/cert/{{ (first .Values.domains).tls_secret_name }}/tls.key; # managed by Certbot

      location / {
         return 444; # send no response, nginx speciality
      }
    }
{{- end }}

{{- range .Values.domains }}
    server {
      access_log  /var/log/nginx/access.log  json_combined;
      server_name{{- range .names }} {{ . }}{{- end }};
      server_tokens off;
      listen 80;

{{ if $.Values.https.enabled }}
{{- range .https }}
      location {{ .path }} {
         return 301 https://$host$request_uri;
      }
{{- end }}
{{- end }}
{{- range .http }}
      location {{ .path }} {
{{ include "proxyPass" . | indent 8 }}
      }
{{- end }}
    }

{{ if $.Values.https.enabled }}
    server {
      access_log  /var/log/nginx/access.log  json_combined;
      server_name{{- range .names }} {{ . }}{{- end }};
      server_tokens off;
      listen 443 http2 ssl;
      ssl_certificate /etc/letsencrypt/cert/{{ .tls_secret_name }}/tls.crt; # managed by Certbot
      ssl_certificate_key /etc/letsencrypt/cert/{{ .tls_secret_name }}/tls.key; # managed by Certbot

{{- range .https }}
      location {{ .path }} {
{{ include "proxyPass" . | indent 8 }}
{{ if $.Values.https.hsts.enabled }}
        add_header Strict-Transport-Security "max-age={{ $.Values.https.hsts.max_age }}; includeSubDomains; preload" always;
{{ end }}
{{ if $.Values.https.expect_ct.enabled }}
        add_header Expect-CT "enforce, max-age={{ $.Values.https.expect_ct.max_age }} " always;
{{ end }}
      }
{{- end }}
{{ include "ssl" . | indent 6 }}
    }
{{ end }}
{{ end }}
