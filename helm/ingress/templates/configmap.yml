apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress
data:
  default.conf: |
    gzip on;
    resolver kube-dns.kube-system.svc.cluster.local valid=30s ipv6=off;
    log_format combinedHost '$http_x_forwarded_for - $remote_user [$time_local] "$request_method $scheme://$host$request_uri $server_protocol" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_time';
    access_log off;

    server {
      access_log  /var/log/nginx/access.log  combinedHost;
      server_tokens off;
      return 404;
    }
    server {
      access_log  /var/log/nginx/access.log  combinedHost;
      server_name localhost;
      server_tokens off;
      listen 80 default_server;
      location /health {
         return 200;
      }
      location / {
         return 404;
      }
    }
    
{{- range .Values.domains }}
    server {
      access_log  /var/log/nginx/access.log  combinedHost;
      server_name{{- range .names }} {{ . }}{{- end }};
      server_tokens off;
      listen 80;

{{ if $.Values.https.enabled }}
{{- range .https }}
      location {{ .path }} {
         return 301 https://$host$request_uri;
      }
{{- end }}
{{- end }}
{{- range .http }}
      location {{ .path }} {
        set $upstream "http://{{ .service }}.{{ .namespace }}.svc.cluster.local:{{ .service_port }}";
        proxy_pass $upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        {{ .custom_nginx_config | indent 8 }}
      }
{{- end }}
    }

{{ if $.Values.https.enabled }}
    server {
      access_log  /var/log/nginx/access.log  combinedHost;
      server_name{{- range .names }} {{ . }}{{- end }};
      server_tokens off;
      listen 443 http2 ssl;

{{- range .https }}
      location {{ .path }} {
        set $upstream "http://{{ .service }}.{{ .namespace }}.svc.cluster.local:{{ .service_port }}";
        proxy_pass $upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        {{ .custom_nginx_config | indent 8 }}
      }
{{- end }}
      # SSL settings
      ssl_certificate /etc/letsencrypt/cert/tls.crt; # managed by Certbot
      ssl_certificate_key /etc/letsencrypt/cert/tls.key; # managed by Certbot
      ssl_dhparam /etc/letsencrypt/dhparams/ssl-dhparams.pem; 
      ssl_session_timeout 1d;
      ssl_session_cache shared:SSL:10m;  # about 40000 sessions
      ssl_session_tickets off;

      # ssl config from mozilla https://ssl-config.mozilla.org/
      # intermediate configuration
      ssl_protocols TLSv1.2 TLSv1.3;
      ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
      ssl_prefer_server_ciphers off;

      # OCSP stapling
      ssl_stapling on;
      ssl_stapling_verify on;
     
      {{ if $.Values.https.hsts.enabled }}
      # HSTS
      add_header Strict-Transport-Security "max-age={{ $.Values.https.hsts.max_age }}; includeSubDomains; preload" always;    
      {{ end }}
      {{ if $.Values.https.expect_ct.enabled }}
      add_header Expect-CT "enforce, max-age={{ $.Values.https.expect_ct.max_age }} " always;
      {{ end }}
    }
{{ end }}
{{ end }}
